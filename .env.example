# Fireflies Configuration
FIREFLIES_API_KEY=your_fireflies_api_key_here

# Jira Configuration
JIRA_URL=https://your-domain.atlassian.net
JIRA_USERNAME=your-email@example.com
JIRA_API_TOKEN=your_jira_api_token_here

# GitHub Configuration
# Option 1: Personal Access Token (legacy - for testing only)
GITHUB_API_TOKEN=your_github_personal_access_token_here

# Option 2: GitHub App (RECOMMENDED for production)
# Create a GitHub App: https://github.com/organizations/YOUR_ORG/settings/apps
# Required permissions: Contents (read), Issues (read), Pull Requests (read), Metadata (read)
GITHUB_APP_ID=123456
GITHUB_APP_INSTALLATION_ID=12345678
# Private key can be:
# - Raw PEM key (multi-line)
# - Path to .pem file: /path/to/private-key.pem
# - Base64-encoded key (for environment variables): base64 < private-key.pem | pbcopy
GITHUB_APP_PRIVATE_KEY="-----BEGIN RSA PRIVATE KEY-----
...your private key here...
-----END RSA PRIVATE KEY-----"

# Organization name (optional - filter searches to specific org)
GITHUB_ORGANIZATION=your-org-name

# AI Configuration
# Choose one provider: openai, anthropic, or google
AI_PROVIDER=openai
AI_TEMPERATURE=0.3
AI_MAX_TOKENS=20000

# OpenAI (GPT) Configuration
OPENAI_API_KEY=your_openai_api_key_here
OPENAI_MODEL=gpt-4o
# Other options: gpt-4o-mini, gpt-4-turbo, gpt-4

# Anthropic (Claude) Configuration
# ANTHROPIC_API_KEY=your_anthropic_api_key_here
# ANTHROPIC_MODEL=claude-3-5-sonnet-20241022
# Other options: claude-3-5-haiku-20241022, claude-3-opus-20240229

# Google (Gemini) Configuration
# GOOGLE_API_KEY=your_google_api_key_here
# GOOGLE_MODEL=gemini-1.5-pro
# Other options: gemini-1.5-flash, gemini-1.0-pro

# Notification Configuration
SLACK_BOT_TOKEN=your_slack_bot_token_here
SLACK_SIGNING_SECRET=your_slack_signing_secret_here
SLACK_CHANNEL=#general

# Slack Chat Feature (AI-powered conversational chat)
# Enable conversational chat via DMs and @mentions
SLACK_CHAT_ENABLED=false  # Set to true to enable
# Whitelist of Slack user IDs allowed to use chat (comma-separated)
# Example: U012ABCDEFG,U345HIJKLMN
# Leave empty to allow all users (not recommended initially)
SLACK_CHAT_WHITELISTED_USERS=

# Authentication & Security
JWT_SECRET_KEY=generate_a_secure_random_key_here_at_least_32_chars
# ENCRYPTION_KEY: Required for encrypting user API keys (Fireflies, etc.)
# Generate with: python -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())"
# Or run: python src/utils/encryption.py
ENCRYPTION_KEY=your_base64_encoded_32_byte_key_here
GOOGLE_CLIENT_ID=your_google_oauth_client_id_here
GOOGLE_CLIENT_SECRET=your_google_oauth_client_secret_here
# Google Workspace OAuth redirect URI
# For local: http://localhost:4000/api/auth/google/workspace/callback
# For production: https://your-domain.com/api/auth/google/workspace/callback
GOOGLE_WORKSPACE_REDIRECT_URI=http://localhost:4000/api/auth/google/workspace/callback

# User Access Control
ALLOWED_EMAIL_DOMAIN=@yourcompany.com
ADMIN_EMAIL=admin@yourcompany.com

# Database Configuration
DATABASE_URL=postgresql://user:password@host:port/dbname
# For local development: sqlite:///pm_agent.db

# Pinecone Vector Database (for context search)
PINECONE_API_KEY=your_pinecone_api_key_here
PINECONE_ENVIRONMENT=us-east-1-aws  # or your Pinecone region
PINECONE_INDEX_NAME=agent-pm-context
PINECONE_DIMENSION=1536  # text-embedding-3-small dimension
PINECONE_METRIC=cosine

# Redis (for conversation history, rate limiting, and session storage)
# Local development: redis://localhost:6379/0
# Production: GCP Memorystore Redis connection string
# Format: redis://[user:password@]host:port/db
REDIS_URL=redis://localhost:6379/0

# Application Configuration
FLASK_ENV=production  # or development
PORT=4000

# JWT Configuration
JWT_EXPIRY_HOURS=24